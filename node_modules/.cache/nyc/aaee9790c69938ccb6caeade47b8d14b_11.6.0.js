var cov_2nxjdozbsn=function(){var path='C:\\Users\\Sudha\\Desktop\\SocialCops-Assignment\\routes\\jsonPatch\\index.js',hash='a7882e67a0809e838cabb0484771e82ad909cfb4',Function=function(){}.constructor,global=new Function('return this')(),gcv='__coverage__',coverageData={path:'C:\\Users\\Sudha\\Desktop\\SocialCops-Assignment\\routes\\jsonPatch\\index.js',statementMap:{'0':{start:{line:2,column:16},end:{line:2,column:34}},'1':{start:{line:3,column:12},end:{line:3,column:35}},'2':{start:{line:4,column:18},end:{line:4,column:38}},'3':{start:{line:6,column:15},end:{line:6,column:38}},'4':{start:{line:8,column:15},end:{line:8,column:31}},'5':{start:{line:9,column:0},end:{line:32,column:3}},'6':{start:{line:11,column:18},end:{line:11,column:47}},'7':{start:{line:12,column:4},end:{line:12,column:92}},'8':{start:{line:12,column:16},end:{line:12,column:92}},'9':{start:{line:15,column:4},end:{line:31,column:7}},'10':{start:{line:16,column:8},end:{line:16,column:104}},'11':{start:{line:16,column:17},end:{line:16,column:104}},'12':{start:{line:18,column:8},end:{line:30,column:9}},'13':{start:{line:20,column:12},end:{line:26,column:13}},'14':{start:{line:21,column:16},end:{line:21,column:82}},'15':{start:{line:22,column:16},end:{line:22,column:86}},'16':{start:{line:25,column:16},end:{line:25,column:96}},'17':{start:{line:29,column:12},end:{line:29,column:92}},'18':{start:{line:34,column:0},end:{line:34,column:24}}},fnMap:{'0':{name:'(anonymous_0)',decl:{start:{line:9,column:17},end:{line:9,column:18}},loc:{start:{line:9,column:37},end:{line:32,column:1}},line:9},'1':{name:'(anonymous_1)',decl:{start:{line:15,column:37},end:{line:15,column:38}},loc:{start:{line:15,column:60},end:{line:31,column:5}},line:15}},branchMap:{'0':{loc:{start:{line:12,column:4},end:{line:12,column:92}},type:'if',locations:[{start:{line:12,column:4},end:{line:12,column:92}},{start:{line:12,column:4},end:{line:12,column:92}}],line:12},'1':{loc:{start:{line:16,column:8},end:{line:16,column:104}},type:'if',locations:[{start:{line:16,column:8},end:{line:16,column:104}},{start:{line:16,column:8},end:{line:16,column:104}}],line:16},'2':{loc:{start:{line:18,column:8},end:{line:30,column:9}},type:'if',locations:[{start:{line:18,column:8},end:{line:30,column:9}},{start:{line:18,column:8},end:{line:30,column:9}}],line:18},'3':{loc:{start:{line:18,column:12},end:{line:18,column:42}},type:'binary-expr',locations:[{start:{line:18,column:12},end:{line:18,column:24}},{start:{line:18,column:28},end:{line:18,column:42}}],line:18},'4':{loc:{start:{line:20,column:12},end:{line:26,column:13}},type:'if',locations:[{start:{line:20,column:12},end:{line:26,column:13}},{start:{line:20,column:12},end:{line:26,column:13}}],line:20},'5':{loc:{start:{line:20,column:16},end:{line:20,column:89}},type:'binary-expr',locations:[{start:{line:20,column:16},end:{line:20,column:56}},{start:{line:20,column:60},end:{line:20,column:89}}],line:20}},s:{'0':0,'1':0,'2':0,'3':0,'4':0,'5':0,'6':0,'7':0,'8':0,'9':0,'10':0,'11':0,'12':0,'13':0,'14':0,'15':0,'16':0,'17':0,'18':0},f:{'0':0,'1':0},b:{'0':[0,0],'1':[0,0],'2':[0,0],'3':[0,0],'4':[0,0],'5':[0,0]},_coverageSchema:'332fd63041d2c1bcb487cc26dd0d5f7d97098a6c'},coverage=global[gcv]||(global[gcv]={});if(coverage[path]&&coverage[path].hash===hash){return coverage[path];}coverageData.hash=hash;return coverage[path]=coverageData;}();/* Module import */const express=(cov_2nxjdozbsn.s[0]++,require('express'));const jwt=(cov_2nxjdozbsn.s[1]++,require('jsonwebtoken'));// to tokenize the parameters
const jsonpatch=(cov_2nxjdozbsn.s[2]++,require('jsonpatch'));// to add patch to JSON object
const config=(cov_2nxjdozbsn.s[3]++,require('../../config'));// all environment variables are stored here
const router=(cov_2nxjdozbsn.s[4]++,express.Router());// Routing object of express module
cov_2nxjdozbsn.s[5]++;router.post('/',(req,res,next)=>{cov_2nxjdozbsn.f[0]++;const token=(cov_2nxjdozbsn.s[6]++,req.headers['x-access-token']);//to fetch jwt token from http header
cov_2nxjdozbsn.s[7]++;if(!token){cov_2nxjdozbsn.b[0][0]++;cov_2nxjdozbsn.s[8]++;return res.status(401).send({auth:false,message:'No token provided.'});}else{cov_2nxjdozbsn.b[0][1]++;}//error handling if no token is present
/* jwt.verify() method to verify the jwt token */cov_2nxjdozbsn.s[9]++;jwt.verify(token,config.secret,function(err,decoded){cov_2nxjdozbsn.f[1]++;cov_2nxjdozbsn.s[10]++;if(err){cov_2nxjdozbsn.b[1][0]++;cov_2nxjdozbsn.s[11]++;return res.status(500).send({auth:false,message:'Failed to authenticate token.'});}else{cov_2nxjdozbsn.b[1][1]++;}//error handling if token is wrong
cov_2nxjdozbsn.s[12]++;if((cov_2nxjdozbsn.b[3][0]++,req.body.doc)&&(cov_2nxjdozbsn.b[3][1]++,req.body.patch)){cov_2nxjdozbsn.b[2][0]++;cov_2nxjdozbsn.s[13]++;// check if fields are empty
if((cov_2nxjdozbsn.b[5][0]++,JSON.parse(JSON.stringify(req.body.doc)))&&(cov_2nxjdozbsn.b[5][1]++,Array.isArray(req.body.patch))){cov_2nxjdozbsn.b[4][0]++;cov_2nxjdozbsn.s[14]++;// check if fields have invalid data
patchedjson=jsonpatch.apply_patch(req.body.doc,req.body.patch);// function to apply patch to json
cov_2nxjdozbsn.s[15]++;res.status(200).send({status:'success',patchedjson:patchedjson});// send success response
}else{cov_2nxjdozbsn.b[4][1]++;cov_2nxjdozbsn.s[16]++;res.status(400).send({status:'failed',message:'Invalid document or patch.'});// error handling in case of invalid document or patch
}}else{cov_2nxjdozbsn.b[2][1]++;cov_2nxjdozbsn.s[17]++;res.status(400).send({status:'failed',message:'Document or patch missing.'});// error handling in case document or patch is not present
}});});cov_2nxjdozbsn.s[18]++;module.exports=router;